Q.1. MongoDB:
 A) Create a ‘films’ collection of documents with the following fields:
 {
 title : "Jurassic Park", 
director : "Steven 
Spielberg", release_year : 
1993, 
language:"English",
 film_type : [ "Action", "Adventure "],
 actors : ["Sam Neill", "Laura Dern", "Jeff Goldblum"]
 }

B) Solve the Following Queries:
 1) Give all English films released before year 2000.
 db.films.find({ language: "English", release_year: { $lt: 2000 } }) 

 2) Display title and release year of ‘Action’ films that starts with the letter ‘K’.
 db.films.find({ film_type: "Action", title: /^K/i }, { title: 1, release_year: 1, _id: 0 }) 

 3) Display the latest five ‘Hindi’ films released in easy-to-read format.
 db.films.find({ language: "English" }).sort({ release_year: -1 }).limit(3) 
 
 4) Count the number of films in which ‘Akshay Kumar’ has not acted.
 db.films.find({ actors: { $not: { $in: ["Akshay Kumar"] } } }).count();

 5) Update release year of a film ‘Jungle Book’ to 2016.
 db.films.updateOne({ title: "Jungle Book" }, { $set: { release_year: 2016 } }); 


Q.2. MongoDB:
 A) Create a ‘Competition’ collection of documents with the following fields: 
{Competition_Name: "….", Competition_Type: "….", Competition_Year:…, students:["….", "….","…." ]}
 In this, Competition_type can be ‘Sport’ or ‘Academic’.

db.Competition.insertMany([ 
  { 
    Competition_Name: "Football Tournament", 
    Competition_Type: "Sport", 
    Competition_Year: 2018, 
    students: ["John Doe", "Jane Smith", "Michael Johnson"] 
  },

2) Display all documents of ‘Competition’ collection in proper format. 
db.Competition.find().pretty()

 B) Solve the Following Queries:
 1) Display all ‘Sport’ competition details which were held between years 2018 to 2019.
 db.Competition.find({ Competition_Type: "Sport", Competition_Year: { $gte: 2018, $lte: 2019 } })

 2) Display number of students participated in ‘Running’ competition which was conducted in year 2019.
 db.Competition.find({ Competition_Name: "Running Competition", Competition_Year: 2019 }).toArray()[0].students.length;

 3) Update Competition_name of ‘Programming Competition’ to ‘Online Programming Competition’ for year 2020.
 db.Competition.updateOne({ Competition_Name: "Programming Competition", Competition_Year: 2020 }, { $set: { Competition_Name: "Online Programming Competition" } });

 4) Add one more name of student ‘Prasad More’ in ‘Project Competition’ of year 2021.
 db.Competition.updateOne({ Competition_Name: "Project Competition", Competition_Year: 2021 }, { $push: { students: "Prasad More" } }); 

 5) Sort Competition collection in descending order of Competition_Year.
 db.Competition.find().sort({ Competition_Year: -1 }) 


Q.3 A) Create a ‘Hospital’ collection of documents with the following fields: 
{ hospital_name:"Birla Hospital", city: “Chinchwad”,specialties:["Pediatric", "Orthopedic"], 
doctors:[{doctor_name:"Dr. Kadam", visit_day:"Monday"}, {doctor_name:"Dr. Mane", 
visit_day:"Tuesday"}], services:["laboratory", "surgical", "diagnostic", "ambulance"], rating:5}

B) Solve the Following Queries:
 1) Display details of hospital where Dr. More is visiting.
 db.Hospital.find({ "doctors.doctor_name": "Dr. More" })

 2) Display all hospital names along with their specialties from ‘Pune’ city.
 db.Hospital.find({ city: "Pune" }, { hospital_name: 1, specialties: 1, _id: 0 })

 3) Count the number of hospitals which are providing ‘ambulance’ service.
 db.Hospital.find({ services: "ambulance" }).count();

 4) Display details of hospital whose ‘rating’ is specified.
 db.Hospital.find({ rating: { $exists: true } })

 5) Delete those documents whose hospital name starts with letter ‘P’.
 db.Hospital.deleteMany({ hospital_name: /^P/ });


Q.4. MongoDB: 
 A) Create a ‘Book’ collection of documents with the following fields: 
{ 
 Book_Title:"….", Publisher_name:"….", Authors:["....."," 
 Language:"….",Publication_year:….,ISBN:…., price:….. 
}

var bulk=db.Book.initializeOrderedBulkOp();

var bulkInsertBooks = [ 
  { 
    Book_Title: "Book 1", 
    Publisher_name: "BPB", 
    Authors: ["Author 1"], 
    Language: "English", 
    Publication_year: 2020, 
    ISBN: "1234567890", 
    price: 20.50 
  },

]; 
db.Book.insertMany(bulkInsertBooks);

 B) Solve the Following Queries:
 1) Display two books of ‘BPB’ publication.
 db.Book.find({ Publisher_name: "BPB" }).limit(2); 

 2) Display Book_title and Authors of books published between years 2019 to 2021.
 db.Book.find({ Publication_year: { $gte: 2019, $lte: 2021 } }, { Book_Title: 1, Authors: 1 }); 

 3) Count number of books having three authors.
 db.Book.count({ Authors: { $size: 3 } });

 4) Update the ISBN number of book titled “Definitive Guide to MongoDB” to “1- 4302-3051-7”.
 db.Book.updateOne({ Book_Title: "Definitive Guide to MongoDB" }, { $set: { ISBN: "1-4302-3051-7" } }); 

 5) Add one more author “Alex Buckley” to book titled “The Java Languages Specification”.
 db.Book.updateOne({ Book_Title: "The Java Languages Specification" }, { $push: { Authors: "Alex Buckley" } }); 


Q.5. MongoDB:  
A) Create an ‘Institute’ collection of documents with the following fields:  
{ Name:"….", City:"….",No_of_faculties:….,Est_Year:….,  
Courses:[{Course_Name:"….", Dur_in_month:….,Fees:….},…] }

db.Institute.insertMany([ 
  { 
    Name: "ABC Institute", 
    City: "Pune", 
    No_of_faculties: 15, 
    Est_Year: 2005, 
    Courses: [ 
      { Course_Name: "Java", Dur_in_month: 6, Fees: 10000 }, 
      { Course_Name: "Python", Dur_in_month: 4, Fees: 8000 } 
    ] 
  },

]); 

B) Solve the Following Queries:
 1) Give all institute names whose establishment year is before2010.
 db.Institute.find({ Est_Year: { $lt: 2010 } }, { Name: 1 }); 

 2) Display Institute details having Course ‘Java’.
 db.Institute.find({ "Courses.Course_Name": "Java" }); 

 3) Update No_of_faculties of ‘Disha’ Institute to 10.
 db.Institute.updateOne({ Name: "Disha Institute" }, { $set: { No_of_faculties: 10 } });

 4) Display the latest three Institutes established in easy-to-read format.
 db.Institute.find().sort({ Est_Year: -1 }).limit(3);

 5) Count the number of Institutes in ‘Pune’ city, established after 2019.
 db.Institute.count({ City: "Pune", Est_Year: { $gt: 2019 } }); 


Q.6. MongoDB: 
A)Create a ‘Doctor’ collection of documents with the following fields: 
 { 
 Doctor_name:"Dr. Patil",  
Contact_No:9876543210, City: “Pune”,  
Qualification:"MBBS", 
 specialization:["ENT", "General Surgery"],  
hospitals:[{hospital_name:"Niramay Hospital", visit_day:"Monday"}, 
 {hospital_name:"Birla Hospital", visit_day:"Tuesday"}] 
 }

var bulkInsertDoctors = [ 
  { 
    Doctor_name: "Dr. Patil", 
    Contact_No: 9876543210, 
    City: "Pune", 
    Qualification: "MBBS", 
    specialization: ["ENT", "General Surgery"], 
    hospitals: [ 
      { hospital_name: "Niramay Hospital", visit_day: "Monday" }, 
      { hospital_name: "Birla Hospital", visit_day: "Tuesday" } 
    ] 
  },

]; 
db.Doctor.insertMany(bulkInsertDoctors);

B) Solve the Following Queries:
 1) Count number of doctors having qualification ‘MBBS’.
 db.Doctor.count({ Qualification: "MBBS" }); 

 2) Display qualification and specialization of all doctors from ‘Mumbai’ city.
 db.Doctor.find({ City: "Mumbai" }, { _id: 0, Qualification: 1, specialization: 1 }); 

 3) Display details of two doctors having specialization in ‘ENT’.
 db.Doctor.find({ specialization: "ENT" }).limit(2);

 4) Change qualification of “Dr. Patil” to MD.
 db.Doctor.updateOne({ Doctor_name: "Dr. Patil" }, { $set: { Qualification: "MD" } }); 

 5) Delete all Doctor Documents not having city ‘Pimpri’.
 db.Doctor.deleteMany({ City: { $ne: "Pimpri" } }); 

Q.7. MongoDB: 
 A. Create a ‘Result’ collection of documents with the following fields: 
 
db.Result.insertMany([ 
  { 
    student_id: 1, 
    student_name: "Mr. Anuj Joshi", 
    class: "TYBBA_CA", 
    test_marks: [ 
      { subject: "Java", marks: 78 }, 
      { subject: "Python", marks: 80 } 
    ], 
    grade: "A" 
  }, 

B) Solve the Following Queries:
 1) Display details of students whose ‘grade’ is given.
 db.Result.find({ grade: { $exists: true } });

 2) Display documents where the subject is ‘Java’ and marks are greater than or equal to 70.
 db.Result.find({ "test_marks.subject": "Java", "test_marks.marks": { $gte: 70 } }); 

 3) Display student details whose name ends with “ne”.
 db.Result.find({ student_name: { $regex: /ne$/ } });

 4) Give name and class of student who has given 4 subject tests.
 db.Result.find({ "test_marks": { $size: 4 } }, { student_name: 1, class: 1 });

 5) Insert a field percentage in student document whose name is “Ms. Priya Rane”
 db.Result.updateOne({ student_name: "Ms. Priya Rane"},{ $set:{ percentage: 85 }});

Q.8. MongoDB: 
 A) Create an ‘Album’ collection of documents with the following fields: 
 {title:"….",artist: ["….","…."],released_year: …., 
 tracks:[{track_id: …., track_title:"….",seconds: …. },…..],genre: "…."} 

var bulkInsertAlbums = [ 
  { 
    title: "Thriller", 
    artist: ["Michael Jackson"], 
    released_year: 1982, 
    tracks: [ 
      { track_id: 1, track_title: "Wanna Be Startin' Somethin'", seconds: 358 }, 
      { track_id: 2, track_title: "Baby Be Mine", seconds: 244 }, 
      { track_id: 3, track_title: "The Girl Is Mine", seconds: 223 }, 
      { track_id: 4, track_title: "Thriller", seconds: 358 } 
    ], 
    genre: "Pop" 
  },
]; 
db.Album.insertMany(bulkInsertAlbums); 

 B) Solve the Following Queries:
 1) Count number of albums released between years 2010 to 2020.
 db.Album.count({ released_year: { $gte: 2010, $lte: 2020 } }); 

 2) Display two documents which have genre ‘Rock’.
 db.Album.find({ genre: "Rock" }).limit(2); 

 3) Give title and artist of an album which has 3 tracks.
 db.Album.findOne({ "tracks": { $size: 3 } }, { title: 1, artist: 1 }); 

 4) Display albums that do not have genre either ‘Rock’ or ‘hip-hop’.
 db.Album.find({ genre: { $nin: ["Rock", "Hip-hop"] } });

 5) Update the seconds of the track to 6.38 whose track id is 2 and album title is “What’s Going On”.
 db.Album.updateOne({ title: "What's Going On", "tracks.track_id": 2 },{ $set: { "tracks.$.seconds": 398 } } ); 

Q.9. MongoDB: 
 A) Create a ‘Contributor’ collection of documents with the following fields: 
 { 
 Contributor_name: "Rohit Sawant", Branch:"CSE",Join_year:2019,  
Language:["C++", "Java"], 
 Articles:[{Language:"C++",tArticles:20,pArticles:30},{Language:"Java",tArticles:50,pArticles:30}], 
 Personal_Info: {age:24, Sem_Marks:[70, 80, 77, 81]} 
 }

db.Contributor.insertMany([ 
  { 
    Contributor_name: "Rohit Sawant", 
    Branch: "CSE", 
    Join_year: 2019, 
    Language: ["C++", "Java"], 
    Articles: [ 
      { Language: "C++", tArticles: 20, pArticles: 30 }, 
      { Language: "Java", tArticles: 50, pArticles: 30 } 
    ], 
    Personal_Info: { age: 24, Sem_Marks: [70, 80, 77, 81] } 
  },
]); 

B) Solve the Following Queriesz:
 1) Append two languages named “Python” and “C” to contributor “Rohit Sawant”.
 db.Contributor.updateOne({ Contributor_name: "Rohit Sawant" },{ $push: { Language: { $each: ["Python", "C"] } } }); 

 2) Delete the first matched document having Branch “CSE” or Join_Year less than 2020.
 db.Contributor.deleteOne({ $or: [{ Branch: "CSE" }, { Join_year: { $lt: 2020 } }] });

 3) Display the latest five Contributors joined in easy-to-read format.
 db.Contributor.find().sort({ Join_year: -1 }).limit(5);

 4) Display documents having “CSE” branch. (Use cursor)
 var cursor = db.Contributor.find({ Branch: "CSE" }); 
while(cursor.hasNext()) { 
  printjson(cursor.next()); 
}
 
 5) Give the name and branch of contributor whose age is greater than or equal to 20.
 db.Contributor.find({ "Personal_Info.age": { $gte: 20 } }, { Contributor_name: 1, Branch: 1 }); 

Q.10. MongoDB: 
 A) Create a ‘Person’ collection of documents with the following fields: 
 {pname: "….", contact_no: …. , city: "….", profession: ["….","…."], 
 cars:[{model: "….", year: ….,price: …. }, …. ]}

var bulk = db.Person.initializeUnorderedBulkOp(); 
var documents = [ 
  { pname: "John Doe", contact_no: "1234567890", city: "New York", profession: ["Engineer", "Teacher"], 
cars: [{ model: "Toyota", year: 2019, price: 25000 }, { model: "Honda", year: 2020, price: 30000 }] },
]; 
 
documents.forEach(function(doc) { 
  bulk.insert(doc); 
}); 
bulk.execute();

B) Solve the Following Queries:
 1) Display the name and contact number of person having 3 cars.
 db.Person.find({ $where: "this.cars.length == 3" }, { pname: 1, contact_no: 1, _id: 0 });

 2) Display different cities from which persons belong.
 db.Person.distinct("city");

 3) Create an index using the ‘pname’ field and name it as ‘Person Name Index’.
 db.Person.createIndex({ pname: 1 }, { name: "Person Name Index" });

 4) Delete the first person document whose city is ‘Chinchwad’.
 db.Person.deleteOne({ city: "Chinchwad" }); 

 5) Update Person document whose name is “Mrs. Mahajan” while updating add only those professions which are not already exists in her profession field.
 db.Person.updateOne( 
  { pname: "Mrs. Mahajan" }, 
  { $addToSet: { profession: { $each: ["New Profession 1", "New Profession 2"] } } } 
);


Q.11. MongoDB: 
A) Create a ‘Company’ collection of documents with the following fields:  
{ company_id:1,  
company_name:"Apple" , 
 contact_details:{ address: "Cupertino, CA 95014", phone: "1-408-996 
1010"}, products:[{code: "A-123", name:"IPhone 7", price:  
29,900},{code: "A-456", name: "IPadPro", price: 37,900}], 
 rating:5 
 }

var bulk = db.Company.initializeUnorderedBulkOp(); 
var documents = [ 
  {  
    company_id: 1, 
    company_name: "Apple", 
    contact_details: { address: "Cupertino, CA 95014", phone: "1-408-996-1010" }, 
    products: [ 
      { code: "A-123", name: "IPhone 7", price: 29900 }, 
      { code: "A-456", name: "IPadPro", price: 37900 } 
    ], 
    rating: 5 
  }, 

]; 
documents.forEach(function(doc) { 
  bulk.insert(doc); 
}); 
bulk.execute(); 

 B) Solve the Following Queries:
 1) Count number of mobile companies whose name ends with letter ‘o’.
 db.Company.find({ company_name: /o$/i }).count();

 2) Sort the company collection in descending order of their id.
 db.Company.find().sort({ company_id: -1 }); 

 3) Give address and phone number of ‘Samsung’ company.
 db.Company.findOne({ company_name: "Samsung" }, { _id: 0, "contact_details.address": 1, "contact_details.phone": 1 });

 4) Update the price of the ‘IPhone 7’ to 32,900.
 db.Company.updateOne({ "products.name": "IPhone 7" }, { $set: { "products.$.price": 32900 } }); 

 5) Display details of company whose ‘rating’ is specified.
 db.Company.find({ rating: 5 }).pretty();

Q.12. MongoDB: 
 A) Create a ‘Customer’ collection of documents with the following fields:  
{ 
 Cust_id: 1,Cust_name: "Mr. Joshi",address:{city: "Pune", street: "S. B. Road"}, orders: [{id:101, 
orderItems:[{productId: 8, price: 560, productName: "keyboard"},…..],},…..] }

db.Customer.insertMany([ 
  { 
    Cust_id: 1, 
    Cust_name: "Mr. Joshi", 
    address: { city: "Pune", street: "S. B. Road" }, 
    orders: [ 
      { 
        id: 101, 
        orderItems: [ 
          { productId: 8, price: 560, productName: "keyboard" }, 
          { productId: 10, price: 1200, productName: "mouse" } 
        ] 
      },
]);

 B) Solve the Following Queries:
 1) Display customer details that have placed two orders.
 db.Customer.find({ $where: "this.orders.length == 2" }).pretty();

 2) Replace the document having id 3 with a new document.
 db.Customer.replaceOne({ Cust_id: 3 }, { /* New document structure */ });

 3) Increment the price of ‘keyboard’ by Rs. 100.
 db.Customer.updateMany({ "orders.orderItems.productName": "keyboard" }, { $inc: { 
"orders.$[].orderItems.$[item].price": 100 } }, { arrayFilters: [{ "item.productName": "keyboard" }] }); 

 4) Add one more product in an order having order id 101, which is placed by “Mr. Joshi”.
 db.Customer.updateOne({ Cust_name: "Mr. Joshi", "orders.id": 101 }, { $push: { "orders.$.orderItems": { 
productId: 9, price: 750, productName: "mouse" } } }); 

 5) Display all the documents having customer id greater than or equal to 4.
 db.Customer.find({ Cust_id: { $gte: 4 } }).pretty();

Q.13. MongoDB: 
A) Create a ‘Company’ collection of documents with the following fields:  
{ company_id:1, company_name:"Apple",contact_details:{ address: "Cupertino, CA 95014", phone: "1
408-9961010"}, products:[{code: "A-123", name:"IPhone 7", price: 29,900},{code: "A-456", name: 
"IPadPro", price: 37,900}],rating:5} 

db.company.insertMany([ 
  { 
    company_id: 1, 
    company_name: "Apple", 
    contact_details: { address: "Cupertino, CA 95014", phone: "1-408-996-1010" }, 
    products: [ 
      { code: "A-123", name: "IPhone 7", price: 29900 }, 
      { code: "A-456", name: "IPadPro", price: 37900 } 
    ], 
    rating: 5 
  },
]); 

B) Solve the Following Queries:
 1) Count number of mobile companies whose name ends with letter ‘o’.
 db.company.find({ company_name: /o$/i }).count(); 

 2) Sort the company collection in descending order of their id.
 db.company.find().sort({ company_id: -1 }).pretty(); 

 3) Give address and phone number of ‘Samsung’ company.
 db.company.findOne({ company_name: "Samsung" }, { _id: 0, "contact_details.address": 1, "contact_details.phone": 1 }); 

 4) Update the price of the ‘IPhone 7’ to 32,900.
 db.company.updateOne({ "products.name": "IPhone 7" }, { $set: { "products.$.price": 32900 } }); 

 5) Display details of company whose ‘rating’ is specified.
 db.company.find({ rating: { $exists: true } }).pretty(); 


Q.14. MongoDB: 
A) Create a ‘Customer’ collection of documents with the following fields: 
{Cust_id: 1, 
Cust_name: "Mr. Joshi", 
 address:{city: "Pune", street: "S. B.  
Road"}, orders: [{ id:101, orderItems:[{ productId: 8, price: 560, productName: "keyboard" },…..], },…..] 
 }

db.Customer.insertMany([ 
  { 
    Cust_id: 1, 
    Cust_name: "Mr. Joshi", 
    address: { city: "Pune", street: "S. B. Road" }, 
    orders: [ 
      { 
        id: 101, 
        orderItems: [ 
          { productId: 8, price: 560, productName: "keyboard" }, 
          { productId: 10, price: 1200, productName: "mouse" } 
        ] 
      },
]); 

 B) Solve the Following Queries:
 1) Display customer details that have placed two orders.
 db.Customer.find({ $where: "this.orders.length == 2" }).pretty(); 

 2) Replace the document having id 3 with a new document.
 db.Customer.replaceOne({ Cust_id: 3 }, { /* New document structure */ }); 

 3) Increment the price of ‘keyboard’ by Rs. 100.
 db.Customer.updateMany({ "orders.orderItems.productName": "keyboard" }, { $inc: { 
"orders.$[].orderItems.$[item].price": 100 } }, { arrayFilters: [{ "item.productName": "keyboard" }] }); 

 4) Add one more product in an order having order id 101, which is placed by “Mr. Joshi”.
 db.Customer.updateOne({ Cust_id: 1, "orders.id": 101 }, { $push: { "orders.$.orderItems": { productId: 9, 
price: 750, productName: "mouse" } } }); 

 5) Display all the documents having customer id greater than or equal to 4. 
 db.Customer.find({ Cust_id: { $gte: 4 } }).pretty(); 


Q.15. MongoDB: 
 A) Create a ‘Projects’ collection of documents with the following fields: 
 { proj_id: …., 
 proj_name:  
"….",  
proj_manager:  
"….", start_date:  
….,  
dur_in_month:  
…., 
 emps_work_in_proj: ["….","…."] 
 }

db.Projects.insertMany([ 
  { proj_id: 1, proj_name: "Project 1", proj_manager: "Manager 1", start_date: new Date("2023-01-01"), 
dur_in_month: 6, emps_work_in_proj: ["Employee 1", "Employee 2"] }, 
]); 

B) Solve the Following Queries:
 1) Display id and name of all those projects having duration greater than or equal to six months.
 db.Projects.find({ dur_in_month: { $gte: 6 } }, { _id: 0, proj_id: 1, proj_name: 1 }).pretty(); 

 2) Count number of projects managed by “Mr. Sumit Jadhav”.
 db.Projects.count({ proj_manager: "Mr. Sumit Jadhav" }); 

 3) Increment the duration of all projects by one month.
 db.Projects.updateMany({}, { $inc: { dur_in_month: 1 } }); 

4) Add one more employee “Mr. Mahesh Kulkarni” to the “College Automation” project.
db.Projects.updateOne({ proj_name: "College Automation" }, { $push: { emps_work_in_proj: "Mr. Mahesh Kulkarni" } });

5) Display details of projects in which 4 employees are working.
db.Projects.find({ $where: "this.emps_work_in_proj.length == 4" }).pretty(); 


Q.16. MongoDB: 
A) Create two documents named user1 and user2 as follows: 
1) user1 = {FName: "Test", LName: "User", Age:30, Gender: "M", Country: "India”}  
user2 = {Name: "Test User", Age:45, Gender: "F", Country: "India”} 
add both these documents (user1 and user2) to the users collection in the subsequent order. 

db.users.insertMany([ 
    { FName: "Test", LName: "User", Age: 30, Gender: "M", Country: "India" }, 
    { Name: "Test User", Age: 45, Gender: "F", Country: "India" } 
])

 B) Solve the Following Queries:
 1) Display all documents in the users collection.
 db.users.find()

 2) Updates the country to UK for all female users and check whether the country has been updated for all the female employees or not.
 db.users.updateMany({ Gender: "F" }, { $set: { Country: "UK" } }) 
 db.users.find({ Gender: "F" })

 3) Add new field company to all the documents.
 db.users.updateMany({}, { $set: { company: "XYZ Company" } })  

 4) Delete the documents where Gender = ‘M’ .
 db.users.deleteMany({ Gender: "M" }) 

 5) Add 5 more similar documents in a collection and find all female users who belongs to either India or US.
 db.users.insertMany([ 
    { FName: "Test1", LName: "User1", Age: 25, Gender: "F", Country: "India", company: "XYZ Company" 
}, 
    { FName: "Test2", LName: "User2", Age: 35, Gender: "F", Country: "US", company: "XYZ Company" 
}, 
    { FName: "Test3", LName: "User3", Age: 28, Gender: "F", Country: "India", company: "XYZ Company" 
}, 
    { FName: "Test4", LName: "User4", Age: 40, Gender: "F", Country: "UK", company: "XYZ Company" 
}, 
    { FName: "Test5", LName: "User5", Age: 32, Gender: "F", Country: "US", company: "XYZ Company" } 
])

db.users.find({ Gender: "F", $or: [{ Country: "India" }, { Country: "US" }] })

Q.17. MongoDB: 
 A) Solve the following: 
 1) Create document named scientist with following fields: 
 {First Name: , Last Name: ,  date _of_birth: , Year : , Contribution: , Country: , Awarded: } in a collection.
 The document keeps information about the scientist who has contributed in various fields like Artificial intelligence, Data Science etc. The scientist may have contributed in more than one field and 
may have received more than one awards for his contribution in various fields.

db.scientists.insertMany([ 
    { 
        "First Name": "Alan", 
        "Last Name": "Turing", 
        "date_of_birth": ISODate("1912-06-23"), 
        "Year": 1950, 
        "Contribution": ["Artificial Intelligence", "Cryptography"], 
        "Country": "United Kingdom", 
        "Awarded": ["Order of the British Empire", "Turing Award"] 
    },
]) 


B) Solve the Following Queries:
 1) List names of all scientists whose last name starts with N.
 db.scientists.find({ "Last Name": /^N/ }, { "First Name": 1, "Last Name": 1, _id: 0 }) 

 2) List all scientists who were born after 1/1/1960.
 db.scientists.find({ "date_of_birth": { $gt: ISODate("1960-01-01") } }) 

 3) List scientists that received an award in year 2000.
 db.scientists.find({ "Awarded": { $in: ["2000"] } }) 

 4) List all scientists who have received “Turing Machine Award”
 db.scientists.find({ "Awarded": "Turing Machine Award" }) 

 5) List all scientist who has made contributed in4fields
 db.scientists.find({ $where: "this.Contribution.length == 4" })


Q.18. MongoDB: 
A) Solve the following 
 1) Create documents Inventory with following fields: 
 {Item Name: , status: , Tags: , qty:}

db.Inventory.insertMany([ 
   { ItemName: "Laptop", status: "A", Tags: ["Electronics", "Office"], qty: 50 }, 
   { ItemName: "Chair", status: "B", Tags: ["Furniture", "Office"], qty: 25 }, 
   { ItemName: "Notebook", status: "C", Tags: ["Stationery", "Office"], qty: 10 }, 
   { ItemName: "Planner", status: "D", Tags: ["Stationery", "Office", "Planner"], qty: 40 }, 
   { ItemName: "Desk", status: "A", Tags: ["Furniture", "Office"], qty: 15 } 
])

 B) Solve the Following Queries:
 1) List all items from the inventory where the status equals "D" and qty is greater than30.
 db.Inventory.find({ status: "D", qty: { $gt: 30 } }) 
 
 2) List all items which have 3 tags.
 db.Inventory.find({ Tags: { $size: 3 } })
 
 3) List all items having status equal to “A” or having quantity less than 30 and height of the product should be greaterthan10
 db.Inventory.find({ 
  $or: [ 
    { status: "A" }, 
    { $and: [{ qty: { $lt: 30 } }, { "height": { $gt: 10 } }] } 
  ] 
})
 
 4) Delete the documents where status = ‘C’
 db.Inventory.deleteMany({ status: "C" }) 
 
 5) Find all documents that keeps item “Planner” and having in stock quantity lessthan20
 db.Inventory.find({ ItemName: "Planner", qty: { $lt: 20 } }) 

Q.19. MongoDB: 
A) Solve the following: 
1) Create documents containing transaction information as: 
{Transaction_id:Customer Name:, Payment_mode:, Amount: Date: } in which the payment was done – Cash, Credit Card or DebitCard in a collection. Verify your created collection and documents by using proper command. 

db.Transactions.insertMany([ 
   { Transaction_id: 1, CustomerName: "Vikas", Payment_mode: "Cash", Amount: 100, Date: "2024-03-21" }, 
   { Transaction_id: 2, CustomerName: "Alice", Payment_mode: "DebitCard", Amount: 200, Date: "2024-03-20" }, 
   { Transaction_id: 3, CustomerName: "Bob", Payment_mode: "CreditCard", Amount: 150, Date: "2024-03-20" }, 
   { Transaction_id: 4, CustomerName: "Vikas", Payment_mode: "CreditCard", Amount: 300, Date: "2024-03-19" }, 
   { Transaction_id: 5, CustomerName: "Charlie", Payment_mode: "DebitCard", Amount: 250, Date: "2024-03-21" } 
])

B) Solve the Following Queries:
 1) Find all transactions which were made by the user “Vikas”.
 db.Transactions.find({ CustomerName: "Vikas" })

 2) Find all the transactions which were made using debit card.
 db.Transactions.find({ Payment_mode: "DebitCard" })

 3) Find transaction id and total amount of purchase made using a credit card.
 db.Transactions.aggregate([ 
   { $match: { Payment_mode: "CreditCard" } }, 
   { $group: { _id: "$Transaction_id", totalAmount: { $sum: "$Amount" } } } 
])

 4) Find the total payment for each payment type.
 db.Transactions.aggregate([ 
   { $group: { _id: "$Payment_mode", totalPayment: { $sum: "$Amount" } } } 
])

 5) List all transactions made by customers on particular date.
 db.Transactions.find({ Date: "2024-03-20" }) 

Q.20. MongoDB: 
A) Solve the following: 
1) Create collection called “marketing” which stores data about a marketing campaign of a retail business. A document in this collection includes the following pieces of information. 
 {_id : , Location : , Age : , Gender :,OwnHome :, Married :, Salary : , Children :,History : "High/Low", Catalogs : ,AmountSpent : }

2)Insert at least 10 documents in a collection and verify inserted document. 
db.marketing.insertMany([ 
   { _id: 1, Location: "New York", Age: 35, Gender: "Male", OwnHome: true, Married: true, Salary: 70000, Children: 2, History: "High", Catalogs: 12, AmountSpent: 300 }, 
   { _id: 2, Location: "Los Angeles", Age: 28, Gender: "Female", OwnHome: false, Married: false, Salary: 50000, Children: 0, History: "Low", Catalogs: 8, AmountSpent: 200 }, 
   { _id: 3, Location: "Chicago", Age: 45, Gender: "Male", OwnHome: true, Married: true, Salary: 80000, Children: 3, History: "High", Catalogs: 15, AmountSpent: 400 }, 
   { _id: 4, Location: "Houston", Age: 40, Gender: "Female", OwnHome: true, Married: false, Salary: 60000, Children: 1, History: "Low", Catalogs: 11, AmountSpent: 250 }, 
   { _id: 5, Location: "Miami", Age: 32, Gender: "Male", OwnHome: false, Married: true, Salary: 75000, Children: 2, History: "High", Catalogs: 9, AmountSpent: 350 } 
])

B) Solve the Following Queries:
 1) Display first 3 documents in the collection.
 db.marketing.find().limit(3) 

 2) Find out the average spent amount by customers who received more than 10 catalogs.
 db.marketing.aggregate([ 
   { $match: { Catalogs: { $gt: 10 } } }, 
   { $group: { _id: null, avgAmountSpent: { $avg: "$AmountSpent" } } } 
])

 3) Find average spent amount by customers who received more than 10 catalogs for different age groups separately.
 db.marketing.aggregate([ 
   { $match: { Catalogs: { $gt: 10 } } }, 
   { $group: { _id: "$Age", avgAmountSpent: { $avg: "$AmountSpent" } } } 
])

 4) Calculate the average salary and the total spent amount for customers who have at least 1 child.
 db.marketing.aggregate([ 
   { $match: { Children: { $gte: 1 } } }, 
   { $group: { _id: null, avgSalary: { $avg: "$Salary" }, totalSpentAmount: { $sum: "$AmountSpent" } } } 
])

 5) Display the salary and spent amount fields of the first 5 documents.
 db.marketing.find().limit(5).forEach(function(doc) { print("Salary: " + doc.Salary + ", AmountSpent: " + doc.AmountSpent) })


Q.21. MongoDB: 
A)Solve the following: 
1) Create two documents named emp1 and emp2 as follows: 
emp1 = {Empid: , EmpName: }  
emp2 = {Empid: , Age:, Department: , Address: , Salary: } add both these documents ( emp1 and emp2) to the Employee collection in the subsequent order. 

var emp1 = { Empid: 1, EmpName: "John Doe" }; 
var emp2 = { Empid: 2, Age: 30, Department: "IT", Address: "123 Main St", Salary: 25000 }; 
db.Employee.insertMany([emp1, emp2]);

B) Solve the Following Queries:
 1) Display all documents in the Employee collection.
 db.Employee.find().pretty();

 2) Updates the department to Marketing for all employees having salary greater than 20000 and less than 30000.
 db.Employee.updateMany( { Salary: { $gt: 20000, $lt: 30000 } }, { $set: { Department: "Marketing" } } );

 3) Add new field company to all the documents.
 db.Employee.updateMany({}, { $set: { company: "YourCompany" } }); 

 4) Delete the documents where Age > 60 .
 db.Employee.deleteMany({ Age: { $gt: 60 } }); 

 5) Add 5 more similar documents in a collection and find all employees who lives in Pune and age less than 25.
 var newEmployees = [ 
     { Empid: 3, Age: 22, Department: "HR", Address: "456 Oak St", Salary: 28000 }, 
     { Empid: 4, Age: 28, Department: "Finance", Address: "789 Elm St", Salary: 32000 }, 
     { Empid: 5, Age: 24, Department: "Marketing", Address: "101 Maple St", Salary: 26000 }, 
    { Empid: 6, Age: 20, Department: "IT", Address: "222 Pine St", Salary: 21000 }, 
    { Empid: 7, Age: 30, Department: "Operations", Address: "333 Cedar St", Salary: 29000 } 
 ];
db.Employee.insertMany(newEmployees);
 
db.Employee.find({ Address: /Pune/i, Age: { $lt: 25 } }).pretty();

Q.22. MongoDB: 
 A) Solve the following: 
 1) Create documents for Online Mobile Shopping information in a collection as follows: 
 {CustomerName:, Model:, Brand:, Price: , RAM_Size:, Internal_Memory:, Ratings_by_customer: } 

db.mobiles.insertMany([ 
    {CustomerName: "John", Model: "Xperia XA1", Brand: "Sony", Price: 250, RAM_Size: "3GB", Internal_Memory: "32GB", Ratings_by_customer: 4.5}, 
    {CustomerName: "Alice", Model: "Galaxy S8", Brand: "Samsung", Price: 500, RAM_Size: "4GB", Internal_Memory: "64GB", Ratings_by_customer: 4.2}, 
    {CustomerName: "Bob", Model: "iPhone 7 Plus", Brand: "Apple", Price: 600, RAM_Size: "3GB", Internal_Memory: "128GB", Ratings_by_customer: 4.7}, 
    {CustomerName: "Emily", Model: "Redmi Note 9", Brand: "Xiaomi", Price: 300, RAM_Size: "3GB", Internal_Memory: "64GB", Ratings_by_customer: 4.3}, 
    {CustomerName: "David", Model: "OnePlus 7T", Brand: "OnePlus", Price: 550, RAM_Size: "8GB", Internal_Memory: "256GB", Ratings_by_customer: 4.8} 
])

B) Solve the Following Queries:
1) List the mobiles having RAM and ROM as 3GB and 32GB.
db.mobiles.find({RAM_Size: "3GB", Internal_Memory: "32GB"})

2) List the customers who bought Samsung J6.
db.mobiles.find({Brand: "Samsung", Model: "J6"}, {CustomerName: 1})

3) List the names of the distinct brands purchased by customer.
db.mobiles.distinct("Brand")

4) Display the name of the brand with highest rating.
db.mobiles.aggregate([ 
    {$group: {_id: "$Brand", maxRating: {$max: "$Ratings_by_customer"}}}, 
    {$sort: {maxRating: -1}}, 
    {$limit: 1} 
])

5) List all the customers in ascending order who bought iphone 7 plus
db.mobiles.find({Model: "iPhone 7 Plus"}).sort({CustomerName: 1}) 

Q.23. MongoDB: 
 A) Solve the following: 
 1) Create document to grocery store as follows: 
 {item_id: , Batch_no:, Item_name: , Price: , Weight: , Category:, items_in stock: } in “departmental_store”  collection.

 2) Insert at least 5 documents in a collection with suitable values. Verify created documents. 
db.departmental_store.insertMany([ 
    {item_id: 1, Batch_no: "B1001", Item_name: "Rice", Price: 10, Weight: "1kg", Category: "Grain", items_in_stock: 100}, 
    {item_id: 2, Batch_no: "B1002", Item_name: "Wheat", Price: 15, Weight: "2kg", Category: "Grain", items_in_stock: 50}, 
    {item_id: 3, Batch_no: "B1003", Item_name: "Sugar", Price: 20, Weight: "1kg", Category: "Sweetener", items_in_stock: 75}, 
    {item_id: 4, Batch_no: "B1004", Item_name: "Salt", Price: 5, Weight: "500g", Category: "Seasoning", items_in_stock: 0}, 
    {item_id: 5, Batch_no: "B1005", Item_name: "Pasta", Price: 8, Weight: "500g", Category: "Grain", items_in_stock: 30} 
])

B) Solve the Following Queries:
 1) Display all documents in the “departmental_store” collection with batch no B1001.
 db.departmental_store.find({Batch_no: "B1001"}) 

 2) Updates the Price of items for items having batch B1002
 db.departmental_store.updateMany({Batch_no: "B1002"}, {$set: {Price: 18}})

 3) Display all items that comes in grain category.
 db.departmental_store.find({Category: "Grain"}) 

 4) Delete the items which stock is 0
 db.departmental_store.deleteMany({items_in_stock: 0})

 5) Sort all items by their Batch_nos.
 db.departmental_store.find().sort({Batch_no: 1})

Q.24. MongoDB: 
A) Solve the following: 
1) Create a database named ‘College’. Create collection named ‘Commerce’ in it. This collection should contain a document. Inside this document, we have a field named ‘Teacher_id’, 
‘Teacher_Name’,‘Address’, ‘Salary’. Each document contains another document with three fields(Specialization, Qualification, Experience) with their one or more values.Verify your created 
collection and database by using proper command. 

db.Commerce.insertOne({ 
    Teacher_id: 1, 
    Teacher_Name: "John Doe", 
    Address: "123 Main St", 
    Salary: 50000, 
    Specialization: ["Accounting", "Finance"], 
    Qualification: "MBA", 
    Experience: 15 
})

 B) Solve the Following Queries:
 1) Display all documents in created collection.
 db.Commerce.find()
 
 2) Display all teachers having more than 10 years of experience.
 db.Commerce.find({Experience: {$gt: 10}}) 
 
 3) Add new field College_Name to all documents.
 db.Commerce.updateMany({}, {$set: {College_Name: "ABC College"}}) 
 
 4) List all teachers having specialization in ‘Accounting’ subject.
 db.Commerce.find({Specialization: "Accounting"})
 
 5) Increment salary of all teachers having experience more than 10 years by Rs.5000.
 db.Commerce.updateMany({Experience: {$gt: 10}}, {$inc: {Salary: 5000}}) 

Q.25. MongoDB: 
 A) Solve the following: 
 1) Created database TV Network containing a collection of products with multiple documents having 
fields {“product_id” : ,"product_name": ,"company":, "type":,"price":, "warranty_years":, 
"available": "true"}, 

db.products.insertMany([ 
    {product_id: 1, product_name: "Smart TV", company: "Samsung", type: "Television", price: 800, warranty_years: 2, available: true}, 
    {product_id: 2, product_name: "4K TV", company: "LG", type: "Television", price: 1000, warranty_years: 3, available: true}, 
    {product_id: 3, product_name: "Soundbar", company: "Sony", type: "Accessory", price: 300, warranty_years: 1, available: true}, 
    {product_id: 4, product_name: "Streaming Device", company: "Roku", type: "Accessory", price: 50, warranty_years: 1, available: true}, 
    {product_id: 5, product_name: "Cable Box", company: "Xfinity", type: "Accessory", price: 150, warranty_years: 2, available: true} 
])

B) Solve the Following Queries:
 1) Check if the cursor object has more documents to return or not.
 cursor = db.products.find() 
 cursor.hasNext() 

 2) Return the next document in a cursor.
 cursor.next() 

 3) Insert a new document having, product_name = “Tata sky", "type" : "tv", "monthly_price" : 250, "term_years" : 2, "cancel_penalty" : 25, "sales_tax" : 
"true", "additional_tariffs" : [ { "kind" : "federal tariff", "amount" : { "percent_of_service": 0.06 } }, { "kind" : "misc. tariff", "amount" : 2.25}]
db.products.insertOne({ 
    product_name: "Tata Sky", 
    type: "TV", 
    monthly_price: 250, 
    term_years: 2, 
    cancel_penalty: 25, 
    sales_tax: true, 
    additional_tariffs: [ 
        {kind: "federal tariff", amount: {percent_of_service: 0.06}}, 
        {kind: "misc. tariff", amount: 2.25} 
    ] 
})

 4) sort all the documents present in the products collection in descending order.
 db.products.find().sort({product_id: -1})

 5) Find how many documents are present in a collection.
 db.products.countDocuments() 


Q.26. MongoDB: 
 A) Solve the following: 
 1) Create Programmer collection with documents containing fields {Programmer_name:,Join_year: , Languages:[……,………], Programmer_details: {age:, "Address":[….,]}};

db.Programmer.insertMany([ 
    {Programmer_name: "John", Join_year: 2018, Languages: ["Java", "Python"], Programmer_details: {age: 30, Address: ["City1", "Country1"]}}, 
    {Programmer_name: "Neha", Join_year: 2017, Languages: ["C++", "Python"], Programmer_details: {age: 25, Address: ["City2", "Country2"]}}, 
    {Programmer_name: "Rahul", Join_year: 2019, Languages: ["JavaScript", "HTML"], Programmer_details: {age: 28, Address: ["City3", "Country3"]}}, 
    {Programmer_name: "Radha", Join_year: 2016, Languages: ["Java", "Python", "C#"], Programmer_details: {age: 32, Address: ["City4", "Country4"]}}, 
    {Programmer_name: "Sonia", Join_year: 2020, Languages: ["C", "Java"], Programmer_details: {age: 27, Address: ["City5", "Country5"]}} 
])

 B) Solve the Following Queries:
 1) Append a single value, i.e., “C” to an array field, i.e., Language field in the document whose Programmer_name is “Neha”.
 db.Programmer.updateOne({Programmer_name: "Neha"}, {$push: {Languages: "C"}})

 2) Remove the first element of the Language field in the document whose programmer_name is “Rahul”.
 db.Programmer.updateOne({Programmer_name: "Rahul"}, {$pop: {Languages: -1}}) 

 3) Removing the last element of the Language field in the document whose Programmer_name is “Rahul”.
 db.Programmer.updateOne({Programmer_name: "Rahul"}, {$pop: {Languages: 1}})

 4) Adds “PHP” in the Language field for the programmer Radha.
 db.Programmer.updateOne({Programmer_name: "Radha"}, {$push: {Languages: "PHP"}}) 

 5) Delete the first document containing programmer name ‘Radha’.
 db.Programmer.deleteOne({Programmer_name: "Radha"}) 


Q.27. MongoDB: 
 A) Solve the following: 
 1) Create documents with following data in a collection: 
 { _id:,vidio_title:,description: , YouTuber Name:, url:, tags: ['mongodb', 'database', 'NoSQL'], likes: 100 }, ]}};

db.Videos.insertMany([ 
    {_id: 1, video_title: "Introduction to MongoDB", description: "Learn the basics of MongoDB", YouTuber_Name: "TechTutorials", url: "https://www.youtube.com/watch v=abcd1234", tags: ['mongodb', 'database', 'NoSQL'], likes: 100}, 
    {_id: 2, video_title: "Advanced MongoDB Queries", description: "Master advanced querying techniques in MongoDB", YouTuber_Name: "TechGeeks", url: "https://www.youtube.com/watch?v=efgh5678", tags: ['mongodb', 'query', 'NoSQL'], likes: 150}, 
    {_id: 3, video_title: "MongoDB Performance Tuning", description: "Optimize your MongoDB database for performance", YouTuber_Name: "DataDive", url: "https://www.youtube.com/watch?v=ijkl9012", tags: ['mongodb', 'performance', 'NoSQL'], likes: 120}, 
    {_id: 4, video_title: "NoSQL Database Comparison", description: "Compare different NoSQL databases including MongoDB", YouTuber_Name: "DBExplorers", url: 
"https://www.youtube.com/watch?v=mnop3456", tags: ['nosql', 'database', 'comparison'], likes: 200}, 
    {_id: 5, video_title: "MongoDB vs SQL", description: "Differences between MongoDB and traditional SQL databases", YouTuber_Name: "TechInsights", url: "https://www.youtube.com/watch?v=qrst7890", tags: ['mongodb', 'sql', 'comparison'], likes: 180} 
])

 B) Solve the Following Queries:
 1) Display a list stating how many videos are uploaded by each youtuber.
 db.Videos.aggregate([ 
    {$group: {_id: "$YouTuber_Name", total_videos: {$sum: 1}}} 
])

 2) Gets the maximum likes of the corresponding values from all documents in the collection for each youtuber.
 db.Videos.aggregate([ 
    {$group: {_id: "$YouTuber_Name", max_likes: {$max: "$likes"}}} 
])

 3) Calculates the average likes of all given values from all documents in the collection for each youtuber.
 db.Videos.aggregate([ 
    {$group: {_id: "$YouTuber_Name", avg_likes: {$avg: "$likes"}}} 
])

 4) Find total likes received to each youtuber.
 db.Videos.aggregate([ 
    {$group: {_id: "$YouTuber_Name", total_likes: {$sum: "$likes"}}} 
])

 5) Calculate total likes received to youtuber except “Mongo DB” video.
 db.Videos.aggregate([ 
    {$match: {video_title: {$ne: "Introduction to MongoDB"}}}, 
    {$group: {_id: "$YouTuber_Name", total_likes: {$sum: "$likes"}}} 
])


Q.28. MongoDB: 
 A) Solve the following: 
 1) Create a collection to embed the 3 branch document inside the Bank document like (“Bank_name":,"Contact":, "Address": ,"branch":“city”: ) that maintains all the related data in a 
single document. Branch should contain fields like branch_id, branch_name&branch_address. 

db.Bank.insertMany([ 
    {Bank_name: "ABC Bank", Contact: "123-456-7890", Address: "123 Main St", branches: [ 
        {branch_id: 1, branch_name: "Main Branch", branch_address: "123 Main St, New York"}, 
        {branch_id: 2, branch_name: "Downtown Branch", branch_address: "456 Broadway, New York"} 
    ]}, 
    {Bank_name: "XYZ Bank", Contact: "987-654-3210", Address: "456 Elm St", branches: [ 
        {branch_id: 1, branch_name: "Central Branch", branch_address: "789 Center St, San Francisco"}, 
        {branch_id: 2, branch_name: "Uptown Branch", branch_address: "321 Pine St, San Francisco"} 
    ]} 
])

 B) Solve the Following Queries:
 1) Display all branches in individual city.
 db.Bank.aggregate([ 
    {$unwind: "$branches"}, 
    {$group: {_id: "$branches.branch_address", branches: {$push: "$branches"}}} 
])

 2) Updates the Address of branch in city Pune.
db.Bank.updateOne({"branches.branch_address": /Pune/}, {$set: {"branches.$.branch_address": "New Address, Pune"}}) 
 
 3) Add new branch in a city Baramati.
 db.Bank.updateOne({Bank_name: "ABC Bank"}, {$push: {branches: {branch_id: 3, branch_name: "Baramati Branch", branch_address: "789 Main St, Baramati"}}}) 

 4) Delete the one branch in city Pune.
 db.Bank.updateOne({Bank_name: "ABC Bank"}, {$pull: {branches: {branch_name: "Old Branch"}}}) 

 5) Count total branches in individual city.
 db.Bank.aggregate([ 
    {$unwind: "$branches"}, 
    {$group: {_id: "$branches.branch_address", total_branches: {$sum: 1}}}]) 


Q.29. MongoDB: 
 A) Solve the following: 
 1) Create a collection "Customer" which contains documents with the same  structure like this one: 
 {"_id" : "password" : ,"firstname" : , "last_login" : ,"lastname" : ,"email" : 
 ,"address" : {"country": ,"street" : , ,"zip" : ,}}

db.Customer.insertMany([ 
    {"_id": 1, "password": "password123", "firstname": "John", "last_login": new Date(), "lastname": "Doe", "email": "john.doe@example.com", "address": {"country": "USA", "street": "123 Main St", "zip": "12345"}}, 
    {"_id": 2, "password": "password456", "firstname": "Alice", "last_login": new Date(), "lastname": "Smith", "email": "alice.smith@example.com", "address": {"country": "Canada", "street": "456 Maple Ave", "zip": "67890"}}, 
    {"_id": 3, "password": "password789", "firstname": "Bob", "last_login": new Date(), "lastname": "Johnson", "email": "bob.johnson@example.com", "address": {"country": "UK", "street": "789 Oak St", "zip": "23456"}}, 
    {"_id": 4, "password": "passwordabc", "firstname": "Emily", "last_login": new Date(), "lastname": "Williams", "email": "emily.williams@example.com", "address": {"country": "Australia", "street": "1011 Elm St", "zip": "78901"}}, 
    {"_id": 5, "password": "passworddef", "firstname": "Charlie", "last_login": new Date(), "lastname": "Brown", "email": "charlie.brown@example.com", "address": {"country": "Germany", "street": "1213 Pine St", "zip": "34567"}} ])

B) Solve the Following Queries: 
 1) Replace a single existing document entirely with other data. 
db.Customer.replaceOne({"firstname": "John"}, {"password": "newpassword123", "firstname": "John", "last_login": new Date(), "lastname": "Doe", "email": "john.doe@example.com", "address": {"country": "USA", "street": "123 Main St", "zip": "12345"}}) 

 2) Replace the document for current firstname field that you have taken in your document. 
db.Customer.updateOne({"firstname": "Alice"}, {$set: {"firstname": "Alicia"}}) 

 3) Insert some other similar documents in it. 
db.Customer.insertMany([ {"_id": 6, "password": "passwordxyz", "firstname": "Daniel", "last_login": new Date(), "lastname": "Miller", "email": "daniel.miller@example.com", "address": {"country": "France", "street": "1415 Cedar St", "zip": "45678"}}, 
{"_id": 7, "password": "passwordghi", "firstname": "Ella", "last_login": new Date(), "lastname": "Davis", "email": "ella.davis@example.com", "address": {"country": "Spain", "street": "1617 Birch St", "zip": "56789"}} ]) 

 4) Find the first document which firstname field is equal "Rahul" and updates (sets) the lastname field to "Patil". 
db.Customer.updateOne({"firstname": "Rahul"}, {$set: {"lastname": "Patil"}}) 

 5) Update multiple fields of a document 
db.Customer.updateOne({"firstname": "Charlie"}, {$set: {"lastname": "Brown Jr.", "email": "charlie.brown.jr@example.com"}}) 

Q.30. MongoDB: 
 A) Solve the following: 
 1)Create a collection employee in your database with the following type of documents: 
 {"_id": 1,"emp_name": { name:, surname: }, "age":,"city": “salary”: }

2) Insert at least 5 documents in a collection with suitable values. Verify your created collection and 
database by using proper command. 
db.employee.insertMany([ 
    {"_id": 1, "emp_name": {"name": "John", "surname": "Doe"}, "age": 30, "city": "New York", "salary": 50000}, 
    {"_id": 2, "emp_name": {"name": "Alice", "surname": "Smith"}, "age": 25, "city": "Los Angeles", "salary": 60000}, 
    {"_id": 3, "emp_name": {"name": "Bob", "surname": "Johnson"}, "age": 35, "city": "Chicago", "salary": 55000}, 
    {"_id": 4, "emp_name": {"name": "Emily", "surname": "Williams"}, "age": 28, "city": "Houston", "salary": 65000}, 
    {"_id": 5, "emp_name": {"name": "Charlie", "surname": "Brown"}, "age": 32, "city": "Miami", "salary": 70000} 
])

B) Solve the Following Queries:
 1) Define a single field index on the age field and also drop created index.
 db.employee.createIndex({"age": 1}) 
 db.employee.dropIndex({"age": 1}) 

 2) Define a multiple field index on the age field for descending and city field for ascending order.
 db.employee.createIndex({"age": -1, "city": 1}) 

 3) Write mongo DB queries that will use the index both for retrieving the documents and for sorting.
 db.employee.find().sort({"age": -1, "city": 1}) 

 4) Retrieve all the indexes in the collection.
 db.employee.getIndexes()

 5) Find total salary spend on employee
 db.employee.aggregate([ 
    {$group: {_id: null, total_salary: {$sum: "$salary"}}} 
])
 